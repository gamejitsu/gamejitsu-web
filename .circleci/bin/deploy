#!/usr/bin/env node

process.on('unhandledRejection', (error) => { throw error })

const execa = require('execa')
const Octokit = require('@octokit/rest')
const { bin: { now: NOW_BIN_PATH } } = require('now/package.json')
const NOW_BIN = require.resolve(`now/${NOW_BIN_PATH}`)

const {
  CIRCLE_PROJECT_USERNAME,
  CIRCLE_PROJECT_REPONAME,
  CIRCLE_PULL_REQUEST,
  CIRCLE_BRANCH,
  GITHUB_TOKEN,
  NOW_TOKEN
} = process.env

const octokit = new Octokit({ auth: GITHUB_TOKEN })
const isMaster = CIRCLE_BRANCH === 'master'
const nowConfigPath = `${__dirname}/../.now/${isMaster ? 'production' : 'staging'}.json`
const nowConfig = require(nowConfigPath)

const now = async (args = []) => {
  const nowArgs = ['--token', NOW_TOKEN, '--local-config', nowConfigPath, ...args]
  const { stdout } = await execa(NOW_BIN, nowArgs, { stderr: 'inherit' })
  return stdout
}

const deploy = async () => {
  const prUrlParts = (CIRCLE_PULL_REQUEST || '').split('/')
  const prNumber = prUrlParts[prUrlParts.length - 1]
  const slug = isMaster ? 'production' : `${nowConfig.name}-pr-${prNumber}`

  const { data: { id: deploymentId } } = await octokit.repos.createDeployment({
    owner: CIRCLE_PROJECT_USERNAME,
    repo: CIRCLE_PROJECT_REPONAME,
    ref: CIRCLE_BRANCH,
    environment: slug,
    required_contexts: []
  })

  const deploymentUrl = await now(isMaster ? ['--prod'] : ['--target', 'staging'])

  if (!isMaster) {
    await now(['alias', deploymentUrl, slug])
  }

  const aliasedUrl = `https://${slug}.now.sh`

  await octokit.repos.createDeploymentStatus({
    owner: CIRCLE_PROJECT_USERNAME,
    repo: CIRCLE_PROJECT_REPONAME,
    deployment_id: deploymentId,
    state: 'success',
    environment_url: aliasedUrl,
    target_url: aliasedUrl
  })
}

deploy()
