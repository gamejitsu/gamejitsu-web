#!/usr/bin/env node

const https = require('https')
const execa = require('execa')
const { bin: { now: NOW_BIN_PATH } } = require('now/package.json')
const NOW_BIN = require.resolve(`now/${NOW_BIN_PATH}`)

const {
  CIRCLE_PROJECT_USERNAME,
  CIRCLE_PROJECT_REPONAME,
  CIRCLE_PULL_REQUEST,
  CIRCLE_BRANCH,
  GITHUB_USERNAME,
  GITHUB_TOKEN,
  NOW_TOKEN
} = process.env

const isMaster = CIRCLE_BRANCH === 'master'
const nowConfigPath = `${__dirname}/../.now/${isMaster ? 'production' : 'staging'}.json`
const nowConfig = require(nowConfigPath)

const githubRequest = (path, {
  method = 'GET',
  body = {},
  headers = {}
}) => (
  new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.github.com',
      path,
      method,
      auth: `${GITHUB_USERNAME}:${GITHUB_TOKEN}`,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': GITHUB_USERNAME,
        ...headers
      }
    }

    const req = https.request(options, (res) => {
      res.setEncoding('utf8')
      const chunks = []

      res.on('data', (chunk) => {
        chunks.push(chunk)
      })

      res.on('end', () => {
        const responseBody = chunks.join('')

        if (res.statusCode < 200 || res.statusCode > 299) {
          reject(new Error(`HTTP Error: ${res.statusCode} - ${responseBody}`))
        } else {
          resolve(JSON.parse(responseBody))
        }
      });
    })

    req.write(JSON.stringify(body))
    req.end()
    req.on('error', (err) => reject(err))
  })
)

const now = async (args = []) => {
  const nowArgs = ['--token', NOW_TOKEN, '--local-config', nowConfigPath, ...args]
  const { stdout } = await execa(NOW_BIN, nowArgs, { stderr: 'inherit' })
  return stdout
}

const deploy = async () => {
  const prUrlParts = CIRCLE_PULL_REQUEST.split('/')
  const prNumber = prUrlParts[prUrlParts.length - 1]
  const slug = isMaster ? 'production' : `${nowConfig.name}-pr-${prNumber}`
  const repoPath = `/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}`

  const deployment = await githubRequest(`${repoPath}/deployments`, {
    method: 'POST',
    body: {
      ref: CIRCLE_BRANCH,
      environment: slug,
      required_contexts: []
    }
  })

  const deploymentPath = `${repoPath}/deployments/${deployment.id}`

  await githubRequest(`${deploymentPath}/statuses`, {
    method: 'POST',
    headers: {
      'Accept': 'application/vnd.github.flash-preview+json'
    },
    body: {
      state: 'in_progress'
    }
  })

  const deploymentUrl = await now(['--target', isMaster ? 'production' : 'staging'])
  if (!isMaster) { await now(['alias', deploymentUrl, slug]) }
  const aliasedUrl = `https://${slug}.now.sh`

  await githubRequest(`${deploymentPath}/statuses`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/vnd.github.flash-preview+json'
    },
    body: {
      state: 'success',
      environment_url: aliasedUrl,
      targetUrl: aliasedUrl
    }
  })
}

deploy()
