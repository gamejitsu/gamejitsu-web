#!/usr/bin/env node

process.on('unhandledRejection', (error) => { throw error })

const axios = require('axios').default
const execa = require('execa')
const { bin: { now: NOW_BIN_PATH } } = require('now/package.json')
const NOW_BIN = require.resolve(`now/${NOW_BIN_PATH}`)

const {
  CIRCLE_PROJECT_USERNAME,
  CIRCLE_PROJECT_REPONAME,
  CIRCLE_PULL_REQUEST,
  CIRCLE_BRANCH,
  GITHUB_USERNAME,
  GITHUB_TOKEN,
  NOW_TOKEN
} = process.env

const isMaster = CIRCLE_BRANCH === 'master'
const nowConfigPath = `${__dirname}/../.now/${isMaster ? 'production' : 'staging'}.json`
const nowConfig = require(nowConfigPath)

const githubRequest = async (path, {
  method = 'GET',
  body = {}
}) => {
  const { data } = await axios.request(`https://api.github.com${path}`, {
    data: body,
    method,
    headers: {
      'User-Agent': GITHUB_USERNAME
    },
    auth: {
      username: GITHUB_USERNAME,
      password: GITHUB_TOKEN
    }
  })

  return data
}

const now = async (args = []) => {
  const nowArgs = ['--token', NOW_TOKEN, '--local-config', nowConfigPath, ...args]
  const { stdout } = await execa(NOW_BIN, nowArgs, { stderr: 'inherit' })
  return stdout
}

const deploy = async () => {
  const prUrlParts = (CIRCLE_PULL_REQUEST || '').split('/')
  const prNumber = prUrlParts[prUrlParts.length - 1]
  const slug = isMaster ? 'production' : `${nowConfig.name}-pr-${prNumber}`
  const repoPath = `/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}`

  const deployment = await githubRequest(`${repoPath}/deployments`, {
    method: 'POST',
    body: {
      ref: CIRCLE_BRANCH,
      environment: slug,
      required_contexts: []
    }
  })

  const deploymentUrl = await now(isMaster ? ['--prod'] : ['--target', 'staging'])
  if (!isMaster) { await now(['alias', deploymentUrl, slug]) }
  const aliasedUrl = `https://${slug}.now.sh`

  await githubRequest(`${repoPath}/deployments/${deployment.id}/statuses`, {
    method: 'POST',
    body: {
      state: 'success',
      environment_url: aliasedUrl,
      targetUrl: aliasedUrl
    }
  })
}

deploy()
